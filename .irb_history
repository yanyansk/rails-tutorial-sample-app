17 + 42
firstname = "hoge"
"#{firstname}fuga"
puts "hoge"
print "hoge"
"foobar".length
"".empty?
"a".empty?
if s.nil?\
  puts "hoge"\
elsif t.nil?\
  puts "fuu"\
else\
  puts "bar"\
end
x = "foo"
puts x if x.nil?
puts "hoge" if !x.empty?
nil.to_s
nil.to_s.empty?
puts "hoge" unless x.empty?
"racecar".length
"racecar".reverse
s = "racecar"
s.reverse == s
def string_message(str = '')\
  if str.empty?\
    "It's an empty string!"\
  else\
    "The string is nonempty."\
  end\
end
puts string_message("hoge")
puts string_message
"foo bar  baz".split
"fooxbarxbaz".split("x")
a = "fooxbarxbaz".split("x")
a.first
a.last
a.empty?
a.include("hoge")
a.include?("hoge")
a.sort
a.reverse
a.suffle
a.shuffle
a
0..9
(0..9).to_a
(0..9).to_array
(0..9).to_param
a[1..-1\
]
a = "A man, a plan, a canal, Panama".split(',')
a
a.to_param
a.join
s = a.join
s
s.split.join
s.split.join!
s.split!.join!
s.split
s
s.split!
s.split()!
s.split!()
s.split.join
s.split.join.downcase
a..z
"a..z"
"a".."z"
"a".."z".to_a
("a".."z").to_a
("a".."z").to_a[6]
(1..5).each do |i|\
  puts i\
end
3.times do\
  puts "hoge"\
end
(1..5).map do |i|\
  i++\
end
(1..5).map do |i|\
  i +1\
end
(1..5).map(&:to_s)
(0..16).each do |i|\
  puts i^2\
end
(0..16).each do |i|\
  puts i**2\
end
def yeller(arr)\
  return arr.map(&:upcase.join)\
end
yeller(["o","l","d"])
def yeller(arr)\
  return arr.map(&:upcase:join)\
end
def yeller(arr)\
  return arr.map do |s|\
end
def yeller(arr)\
  return arr.map do |s|\
  end
def yeller(arr)\
  return arr.map do |s|\
    s.upcase\
  end.join\
end
yeller(["o","l","d"])
def random_subdomain\
  return (a..z).shuffle[0:7].join\
end
def random_subdomain\
  return (a..z).shuffle[0..7].join\
end
random_subdomain
def random_subdomain\
  return ("a".."z").shuffle[0..7].join\
end
random_subdomain
def random_subdomain\
  return ("a".."z").to_a.shuffle[0..7].join\
end
random_subdomain
random_subdomain
random_subdomain
("a".."z")
p :name
puts :name
hoge = {one: "uno", two: "dos", three: "tres"}
hoge
hoge.each do |key, val|\
  "#{key}のスペイン語は#{val}です"\
end
hoge.each do |key, val|\
  echo "#{key}のスペイン語は#{val}です"\
end
hoge.each do |key, val|\
  puts "#{key}のスペイン語は#{val}です"\
end
 { "a" => 100, "b" => 200 }.merge({ "b" => 300 })
"foo".class
h = Hash.new(0)
hash[:a]
h[:a]
Range.new(1,10)
class Word\
  def palindrome?(string)\
    string == string.reverse\
  end\
end
w = Word.new
w.palindrome?("foobar")
w.palindrome?("aaaa")
class Word < String\
  def palindrome?\
    self == self.revers\
  end\
end
class Word < String\
  def palindrome?\
    self == self.revers\
  end\
end
s = Word.new("hoge")
s.plaindrome?
s.palindrome?
class Word < String\
  def palindrome?\
    self == self.reverse\
  end\
end
s.palindrome?
a = Word.new("aaaa")
a.palindrome?
s.length
Hash.superclass
Hash.superclass.superclass
Symbol.superclass.superclass
Range.superclass.superclass
Range.superclass
Symbol.superclass
controller = StaticPagesController.new
controller.class
controller.superclass
controller.class.superclass
controller.class.superclass.superclass
controller.class.superclass.superclass.superclass
controller.class.superclass.superclass.superclass.superclass
controller.class.superclass.superclass.superclass.superclass.superclass
User.new
require ./example_user
require './example_user'
example = User.new
example.name
example.name = 'hoge'
example
User.new
user = User.new(name: "Michael Hartl", email: "mhartl@example.com")
user.valid?
user
user.save
user
user.email
user.email.instance
user.email.property
user.email.class
User.find(1\
)
User.find(3)
User.find_by(email: "mhartl@example.com")
User.first
User.all
User.find_by_name("Michael Hartl")
User.all
User.all.class
User.all.class.superclass
User.all.class.superclass.superclass
User.all.length
use
user
user.email
user.email = "hoge@hoge.com"
user
user.save
user
user.created_at
user.created_at = 1.year.ago
user
user.cretated_at
user.createdat
user.created/at
user.created/at
user.created_at
user.save
u = User.new
u = User.new
u
u.valid?
u.errors.messages
user = User.new(name: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
user = User.new(:name "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
user = User.new(name: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
user
user.valid?
user.errors.messages
User.create(name: "Michael Hartl", email: "mhartl@example.com", password: "foobar", password_confirmation: "foobar")
user = User.find_by(email: "mhartl@example.com")
user.password_digest
user.authenticate("foobar")
user.authenticate("for")
User.count
User.count
User.first
User.first
user = User.first
user.update_attributes(password: "foobar")
User.first
SecureRandom.urlsafe_base64
